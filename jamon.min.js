"use strict";{let hiddenClassName="hidden";let listenerIndex=1;const listenerID=Symbol("listenerID");const dataMap=new Map();const proxyMap=new Map();const EventRegExp={FOCUS:/^(blur|change|focus)$/,FORM:/^(reset|submit)$/,KEYBOARD:/^key(down|press|up)$/,MOUSE:/^(click|dblclick|contextmenu)|(mouse(down|enter|leave|move|out|over|up))$/,POINTER:/^pointer(cancel|down|enter|leave|move|out|over|up)$/,TOUCH:/^touch(cancel|end|move|start)$/};const NodeMethod={PREPEND:0,APPEND:1,BEFORE:2,AFTER:3,REPLACE:4};const ClassListMethod={ADD:"add",REMOVE:"remove",TOGGLE:"toggle"};const Relative={PARENT_ELEMENT:"parentElement",FIRST_ELEMENT_CHILD:"firstElementChild",LAST_ELEMENT_CHILD:"lastElementChild"};const matchMethod=Element.prototype.msMatchesSelector?"msMatchesSelector":"matches";function kebabCaseToCamelCase(a){return a.replace(/-([a-z])/g,(nothing,match)=>match.toUpperCase())}function isUndefined(a){return typeof a==="undefined"}function isString(a){return typeof a==="string"}function addRemoveToggleClass(a,b,c){if(isUndefined(b)){throw new ReferenceError();}if(!isString(b)){throw new TypeError();}const classNames=b.split(" ").filter(item=>item.length);if(classNames.length){for(const element of a){if(c!==ClassListMethod.TOGGLE){element.classList[c](...classNames)}else{for(const b of classNames){element.classList.toggle(b)}}}}return a}function getSetProperty(a,b,c){if(isUndefined(c)){return a[0]?a[0][b]:undefined}else if(c!==null){for(const element of a){element[b]=c}}else{for(const element of a){delete element[b]}}return a}function getRelative(a,b){const relatives=[];for(const element of a){relatives.push(element[b])}return Jamon.from(relatives)}function insertNode(a,b,c,d){if(!a instanceof Jamon&&!isString(a)){throw new TypeError();}if(!b instanceof Jamon){throw new TypeError();}let subjectIsText=false;if(isString(a)){a=document.createTextNode(a);subjectIsText=true}else{a=a[0]}b=b[0];if(c===NodeMethod.BEFORE||c===NodeMethod.AFTER){b.parentElement.insertBefore(a,c===NodeMethod.BEFORE?b:b.nextSibling);if(subjectIsText&&b.parentNode){b.parentNode.normalize()}}else if(c===NodeMethod.PREPEND){b.insertBefore(a,b.firstChild);if(subjectIsText){b.normalize()}}else if(c===NodeMethod.APPEND){b.appendChild(a);if(subjectIsText){b.normalize()}}else if(c===NodeMethod.REPLACE){b.parentElement.replaceChild(a,b);if(subjectIsText){a.parentNode.normalize()}}return arguments[d]}function getProxyId(a,b){return`${a[listenerID]}|${b}`}function findInElement(a,b,c){let result,temporaryId=false,id=a.id;const method=c?"querySelector":"querySelectorAll";if(!id){temporaryId=true;id=`jamon-temporary-id`;a.id=id}b=`#${id}${b}`;result=a[method](b);if(temporaryId){a.removeAttribute("id")}return result}class Jamon extends Array{static create(type,attributes){const element=document.createElement(type);if(attributes){for(const attribute of Object.keys(attributes)){element.setAttribute(attribute,attributes[attribute])}}return Jamon.from([element])}static get hiddenClassName(){return hiddenClassName}static set hiddenClassName(className){if(isString(className)&&className.length){hiddenClassName=className}}static get(selector){let result;if(isUndefined(selector)){result=Jamon.of()}else if(isString(selector)){result=Jamon.of(document.querySelector(selector))}else if(selector instanceof Node&&[Node.ELEMENT_NODE,Node.DOCUMENT_NODE,Node.TEXT_NODE].includes(selector.nodeType)){result=Jamon.of(selector)}else if(selector instanceof Jamon){result=selector.slice(0,1)}else if([NodeList,HTMLCollection,Array].includes(selector.constructor)){result=Jamon.of(Array.prototype.slice.call(selector,0,1))}else{throw new TypeError();}return result}static getAll(selector){let result;if(isUndefined(selector)){result=Jamon.from([])}else if(isString(selector)){result=Jamon.from(document.querySelectorAll(selector))}else if(selector instanceof Jamon){result=selector}else if([NodeList,HTMLCollection,Array].includes(selector.constructor)){result=Jamon.from(selector)}else{throw new TypeError();}return result}findOne(selector){let result;for(const element of this){result=findInElement(element,selector,true);if(result){return Jamon.from([result])}}}findAll(selector){let results=[];for(const element of this){results=results.concat(Array.from(findInElement(element,selector)))}return Jamon.from(new Set(results))}filterBy(selector){const elements=this.filter((element)=>element[matchMethod](selector));return Jamon.from(elements)}addClass(className){return addRemoveToggleClass(this,className,ClassListMethod.ADD)}removeClass(className){return addRemoveToggleClass(this,className,ClassListMethod.REMOVE)}toggleClass(className){return addRemoveToggleClass(this,className,ClassListMethod.TOGGLE)}hasClass(className){return this[0]&&this[0].classList.contains(className)}show(){return addRemoveToggleClass(this,hiddenClassName,ClassListMethod.REMOVE)}hide(){return addRemoveToggleClass(this,hiddenClassName,ClassListMethod.ADD)}toggle(){return addRemoveToggleClass(this,hiddenClassName,ClassListMethod.TOGGLE)}val(value){return getSetProperty(this,"value",value)}html(html){return getSetProperty(this,"innerHTML",html)}text(text){return getSetProperty(this,"textContent",text)}prop(property,value){return getSetProperty(this,property,value)}attr(attribute,value){if(isUndefined(value)){return this[0].getAttribute(attribute)}else if(value!==null){for(const element of this){element.setAttribute(attribute,value)}}else{for(const element of this){element.removeAttribute(attribute)}}return this}css(style,value){if(isString(style)){style=kebabCaseToCamelCase(style);if(!isUndefined(value)){for(const element of this){element.style[style]=value}return this}else{return window.getComputedStyle(this[0])[style]}}else{if(typeof style==="object"){const normalizedStyles=new Map();Object.keys(style).forEach((property)=>{normalizedStyles.set(kebabCaseToCamelCase(property),style[property])});for(const element of this){for(const normalizedStyle of normalizedStyles){element.style[normalizedStyle[0]]=normalizedStyle[1]}}}return this}}data(name,value){if(isUndefined(value)){const element=this[0],storage=dataMap.get(element);let data;if(storage&&(!isUndefined(storage.get(name)))){data=storage.get(name)}else{data=element.dataset[name]}return data}for(const element of this){dataMap.set(element,(dataMap.get(element)||new Map()).set(name,value))}return this}width(){return this[0].getBoundingClientRect().width}height(){return this[0].getBoundingClientRect().height}offset(){const element=this[0];return{left:element.offsetLeft,top:element.offsetTop}}position(position){const rect=this[0].getBoundingClientRect();if(!position){return{left:rect.left,top:rect.top}}for(const element of this){const offsetParent=element.offsetParent||document.body,parentRect=offsetParent.getBoundingClientRect(),computedStyle=window.getComputedStyle(element),style=element.style,left=position.left,top=position.top;let originalLeft,originalTop;if(computedStyle.position==="static"){originalLeft=element.offsetLeft;originalTop=element.offsetTop;style.position="relative"}else{originalLeft=element.offsetLeft-(parseFloat(computedStyle.left)||0);originalTop=element.offsetTop-(parseFloat(computedStyle.top)||0)}if(!isUndefined(left)){style.left=left-originalLeft-parentRect.left+"px"}if(!isUndefined(top)){style.top=top-originalTop-parentRect.top+"px"}}return this}parent(){return getRelative(this,Relative.PARENT_ELEMENT)}firstChild(){return getRelative(this,Relative.FIRST_ELEMENT_CHILD)}lastChild(){return getRelative(this,Relative.LAST_ELEMENT_CHILD)}children(){const children=[];for(const element of this){children.push(...Array.from(element.children))}return Jamon.from(children)}contents(){const contents=[];for(const element of this){contents.push(...Array.from(element.childNodes))}return Jamon.from(contents)}closest(selector){const closests=[];for(const element of this){closests.push(element.closest(selector))}return Jamon.from(closests)}prepend(subject){return insertNode(subject,this,NodeMethod.PREPEND,1)}prependTo(target){return insertNode(this,target,NodeMethod.PREPEND,0)}append(subject){return insertNode(subject,this,NodeMethod.APPEND,1)}appendTo(target){return insertNode(this,target,NodeMethod.APPEND,0)}before(subject){return insertNode(subject,this,NodeMethod.BEFORE,1)}insertBefore(target){return insertNode(this,target,NodeMethod.BEFORE,0)}after(subject){return insertNode(subject,this,NodeMethod.AFTER,1)}insertAfter(target){return insertNode(this,target,NodeMethod.AFTER,0)}replaceWith(subject){return insertNode(subject,this,NodeMethod.REPLACE,1)}replaceAll(target){return insertNode(this,target,NodeMethod.REPLACE,0)}clone(deep){const clones=new Jamon();for(const element of this){clones.push(element.cloneNode(deep))}return clones}remove(){for(const element of this){element.remove();element.parentNode.normalize()}return this}on(events,listener){events=events.split(" ");for(const event of events){for(const element of this){element.addEventListener(event,listener)}}return this}off(events,selector,listener){events=events.split(" ");if(listener){listener=proxyMap.get(getProxyId(listener,selector))}else{listener=selector}for(const event of events){for(const element of this){element.removeEventListener(event,listener)}}return this}delegate(event,selector,listener){const proxy=function(e){const target=e.target;if(target[matchMethod](selector)){listener.call(target,e)}};if(!listener[listenerID]){listener[listenerID]=listenerIndex++}proxyMap.set(getProxyId(listener,selector),proxy);return this.on(event,proxy)}trigger(event,detail){let type="Event",bubbles=false,cancelable=false;if(!isUndefined(detail)){type="CustomEvent"}else if(EventRegExp.MOUSE.test(event)){type="MouseEvent";bubbles=true;cancelable=true}else if(EventRegExp.FOCUS.test(event)){type="FocusEvent";if(event==="change"){bubbles=true}}else if(EventRegExp.FORM.test(event)){bubbles=true;cancelable=true}else if(EventRegExp.KEYBOARD.test(event)){type="KeyboardEvent";bubbles=true;cancelable=true}else if(EventRegExp.TOUCH.test(event)){type="TouchEvent";bubbles=true;if(event!=="touchcancel"){cancelable=true}}else if(EventRegExp.POINTER.test(event)){let exceptions=["pointerenter","pointerleave"];type="PointerEvent";if(!exceptions.includes(event)){bubbles=true}exceptions.push("pointercancel");if(!exceptions.includes(event)){cancelable=true}}for(const element of this){element.dispatchEvent(new window[type](event,{bubbles,cancelable,detail}))}return this}}window.Jamon=Jamon;if(isUndefined(window.$)&&isUndefined(window.$$)){window.$=Jamon.get;window.$$=Jamon.getAll}}
