"use strict";{let hiddenClassName="hidden";const proxyProperty=Symbol("jamonProxies");const listenerProperty=Symbol("jamonListeners");const NodeMethod={PREPEND:0,APPEND:1,BEFORE:2,AFTER:3,REPLACE:4};const ClassListMethod={ADD:"add",REMOVE:"remove",TOGGLE:"toggle"};const matchMethod=Element.prototype.msMatchesSelector?"msMatchesSelector":"matches";function toCamelCase(a){return a.replace(/-([a-z])/g,(nothing,match)=>match.toUpperCase())}function toKebabCase(a){return a.replace(/([A-Z])/g,(match)=>"-"+match.toLowerCase())}function trimAndSplit(a){return a?a.trim().split(" "):[]}function isUndefined(a){return typeof a==="undefined"}function isString(a){return typeof a==="string"}function addRemoveToggleClass(a,b,c){const classNames=trimAndSplit(b);if(classNames.length){for(const element of a){if(c!==ClassListMethod.TOGGLE){element.classList[c](...classNames)}else{for(const b of classNames){element.classList.toggle(b)}}}}return a}function getSetRemoveProperty(a,b,c){if(isUndefined(c)){return a[0]?a[0][b]:undefined}else if(c!==null){for(const element of a){element[b]=c}}else{for(const element of a){delete element[b]}}return a}function insertNode(a,b,c,d){if(!a instanceof Jamon&&!isString(a)){throw new TypeError();}if(!b instanceof Jamon){throw new TypeError();}let subjectIsText=false;if(isString(a)){a=document.createTextNode(a);subjectIsText=true}else{a=a[0]}b=b[0];if(c===NodeMethod.BEFORE||c===NodeMethod.AFTER){b.parentElement.insertBefore(a,c===NodeMethod.BEFORE?b:b.nextSibling);if(subjectIsText&&b.parentNode){b.parentNode.normalize()}}else if(c===NodeMethod.PREPEND){b.insertBefore(a,b.firstChild);if(subjectIsText){b.normalize()}}else if(c===NodeMethod.APPEND){b.appendChild(a);if(subjectIsText){b.normalize()}}else if(c===NodeMethod.REPLACE){b.parentElement.replaceChild(a,b);if(subjectIsText){a.parentNode.normalize()}}return arguments[d]}function getListenerOrProxy(a,b){let proxy;if(!isUndefined(b)){let proxies=a[proxyProperty];if(isUndefined(proxies)){proxies=new Map();a[proxyProperty]=proxies}if(proxies.has(b)){proxy=proxies.get(b)}else{proxy=function(e){const target=e.target;if(target[matchMethod](b)){a.call(target,e)}}proxies.set(b,proxy)}}return proxy||a}function getListenerGroupName(a,b){return`${a}|${selector}`}function findInElement(a,b,c){let result,temporaryId=false,id=a.id;const method=c?"querySelector":"querySelectorAll";if(!id){temporaryId=true;id="jamon-temporary-id";a.id=id}b=`#${id}${b}`;result=a[method](b);if(temporaryId){a.removeAttribute("id")}return result}class Jamon extends Array{static create(type,properties){const element=document.createElement(type);if(!isUndefined(properties)){for(const property of Object.keys(properties)){element[property]=properties[property]}}return Jamon.of(element)}static get hiddenClassName(){return hiddenClassName}static set hiddenClassName(className){hiddenClassName=className}static get(selector){if(isUndefined(selector)){return new Jamon()}else if(isString(selector)){return Jamon.of(document.querySelector(selector))}else if(selector instanceof Node&&[Node.ELEMENT_NODE,Node.DOCUMENT_NODE,Node.TEXT_NODE].includes(selector.nodeType)){return Jamon.of(selector)}else if(selector[Symbol.iterator]){return selector.length?Jamon.of(selector[0]):new Jamon()}else{throw new TypeError();}}static getAll(selector){if(isUndefined(selector)){return new Jamon()}else if(isString(selector)){return Jamon.from(document.querySelectorAll(selector))}else if(selector instanceof Jamon){return selector}else if(selector[Symbol.iterator]){return Jamon.from(selector)}else{throw new TypeError();}}*items(){for(const element of this){yield Jamon.of(element)}}addClass(className){return addRemoveToggleClass(this,className,ClassListMethod.ADD)}removeClass(className){return addRemoveToggleClass(this,className,ClassListMethod.REMOVE)}toggleClass(className){return addRemoveToggleClass(this,className,ClassListMethod.TOGGLE)}hasClass(className){return this[0]&&this[0].classList.contains(className)}show(){return addRemoveToggleClass(this,hiddenClassName,ClassListMethod.REMOVE)}hide(){return addRemoveToggleClass(this,hiddenClassName,ClassListMethod.ADD)}toggle(){return addRemoveToggleClass(this,hiddenClassName,ClassListMethod.TOGGLE)}val(value){return getSetRemoveProperty(this,"value",value)}html(html){return getSetRemoveProperty(this,"innerHTML",html!==null?html:"")}text(text){return getSetRemoveProperty(this,"textContent",text!==null?text:"")}prop(property,value){return getSetRemoveProperty(this,property,value)}attr(attribute,value){if(isUndefined(value)){let first=this[0];return(first&&first.hasAttribute(attribute))?first.getAttribute(attribute):undefined}else if(value!==null){for(const element of this){element.setAttribute(attribute,value)}}else{for(const element of this){element.removeAttribute(attribute)}}return this}css(property,value){if(isUndefined(value)){let first=this[0];return first?window.getComputedStyle(first).getPropertyValue(toKebabCase(property)):undefined}else{for(const element of this){element.style[toCamelCase(property)]=String(value)}return this}}data(name,value){if(isUndefined(value)){const first=this[0];return first?first.dataset[name]:undefined}else if(value!==null){for(const element of this){element.dataset[name]=value}return this}else{for(const element of this){delete element.dataset[name]}return this}}width(){return this[0].getBoundingClientRect().width}height(){return this[0].getBoundingClientRect().height}offset(){const element=this[0];return{left:element.offsetLeft,top:element.offsetTop}}position(position){const rect=this[0].getBoundingClientRect();if(!position){return{left:rect.left,top:rect.top}}for(const element of this){const offsetParent=element.offsetParent||document.body,parentRect=offsetParent.getBoundingClientRect(),computedStyle=getComputedStyle(element),style=element.style,left=position.left,top=position.top;let originalLeft,originalTop;if(computedStyle.position==="static"){originalLeft=element.offsetLeft;originalTop=element.offsetTop;style.position="relative"}else{originalLeft=element.offsetLeft-(parseFloat(computedStyle.left)||0);originalTop=element.offsetTop-(parseFloat(computedStyle.top)||0)}if(!isUndefined(left)){style.left=left-originalLeft-parentRect.left+"px"}if(!isUndefined(top)){style.top=top-originalTop-parentRect.top+"px"}}return this}findOne(selector){let result=new Jamon();for(const element of this){const found=findInElement(element,selector,true);if(found){result.push(found);break}}return result}findAll(selector){let results=new Jamon();for(const element of this){const found=findInElement(element,selector);if(found.length){results.push(...found)}}return results}parent(){const parents=new Jamon();for(const element of this){parents.push(element.parentElement)}return parents}children(){const children=new Jamon();for(const element of this){children.push(...(element.children))}return children}closest(selector){const closests=new Jamon();for(const element of this){closests.push(element.closest(selector))}return closests}prepend(subject){return insertNode(subject,this,NodeMethod.PREPEND,1)}prependTo(target){return insertNode(this,target,NodeMethod.PREPEND,0)}append(subject){return insertNode(subject,this,NodeMethod.APPEND,1)}appendTo(target){return insertNode(this,target,NodeMethod.APPEND,0)}before(subject){return insertNode(subject,this,NodeMethod.BEFORE,1)}insertBefore(target){return insertNode(this,target,NodeMethod.BEFORE,0)}after(subject){return insertNode(subject,this,NodeMethod.AFTER,1)}insertAfter(target){return insertNode(this,target,NodeMethod.AFTER,0)}replaceWith(subject){return insertNode(subject,this,NodeMethod.REPLACE,1)}replace(target){return insertNode(this,target,NodeMethod.REPLACE,0)}clone(deep){const clones=new Jamon();for(const element of this){clones.push(element.cloneNode(deep))}return clones}remove(){for(const element of this){element.remove();element.parentNode.normalize()}return this}on(events,selector,listener){if(isUndefined(listener)){listener=selector;selector=undefined}listener=getListenerOrProxy(listener,selector);for(const event of trimAndSplit(events)){const groupName=getListenerGroupName(event,selector);for(const element of this){let listeners=element[listenerProperty];if(isUndefined(listeners)){listeners=new Map();element[listenerProperty]=listeners}let listenerGroup=listeners.get(groupName);if(isUndefined(listenerGroup)){listenerGroup=new Set();listeners.set(groupName,listenerGroup)}if(!listenerGroup.has(listener)){listenerGroup.add(listener);element.addEventListener(event,listener)}else{throw new Error("Duplicate event listener");}}}return this}off(events,selector,callback){let listener;if(callback){}else{listener=selector}for(const event of trimAndSplit(events)){for(const element of this){element.removeEventListener(event,listener)}}return this}trigger(type,eventData={}){eventData=Object.assign(eventData,{bubbles:true,cancelable:true});for(const element of this){element.dispatchEvent(new CustomEvent(type,eventData))}return this}}window.Jamon=Jamon;if(isUndefined(window.$)&&isUndefined(window.$$)){window.$=Jamon.get;window.$$=Jamon.getAll}}
